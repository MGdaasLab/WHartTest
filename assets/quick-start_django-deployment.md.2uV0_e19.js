import{_ as a,c as i,o as n,ae as e}from"./chunks/framework.BBQ6_s69.js";const c=JSON.parse('{"title":"🏢 后端部署指南","description":"","frontmatter":{},"headers":[],"relativePath":"quick-start/django-deployment.md","filePath":"quick-start/django-deployment.md","lastUpdated":1757938511000}'),l={name:"quick-start/django-deployment.md"};function t(h,s,p,k,d,r){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="🏢-后端部署指南" tabindex="-1">🏢 后端部署指南 <a class="header-anchor" href="#🏢-后端部署指南" aria-label="Permalink to &quot;🏢 后端部署指南&quot;">​</a></h1><p>本指南将引导您完成 WHartTest 后端服务的生产环境部署。系统已改为使用API方式调用嵌入模型，无需本地下载模型文件。</p><h2 id="🚀-部署方案" tabindex="-1">🚀 部署方案 <a class="header-anchor" href="#🚀-部署方案" aria-label="Permalink to &quot;🚀 部署方案&quot;">​</a></h2><p>我们提供多种部署方案以适应不同环境的需求。</p><h3 id="🐳-方案一-使用-docker-部署-推荐" tabindex="-1">🐳 方案一：使用 Docker 部署 (推荐) <a class="header-anchor" href="#🐳-方案一-使用-docker-部署-推荐" aria-label="Permalink to &quot;🐳 方案一：使用 Docker 部署 (推荐)&quot;">​</a></h3><p>Docker 提供了环境一致性，是生产环境部署的首选方案。</p><h4 id="_1-构建-docker-镜像" tabindex="-1">1. 构建 Docker 镜像 <a class="header-anchor" href="#_1-构建-docker-镜像" aria-label="Permalink to &quot;1. 构建 Docker 镜像&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在项目根目录 (WHartTest_Django/) 下执行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wharttest-django</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><h4 id="_2-运行-docker-容器" tabindex="-1">2. 运行 Docker 容器 <a class="header-anchor" href="#_2-运行-docker-容器" aria-label="Permalink to &quot;2. 运行 Docker 容器&quot;">​</a></h4><p>您可以使用 <code>.env</code> 文件来管理环境变量，这是最推荐的方式。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 确保 .env 文件在项目根目录中</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行容器，并将 .env 文件传递给容器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> always</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8000:8000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --env-file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./whart_data:/app/data</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  wharttest-django</span></span></code></pre></div><ul><li><code>-v ./whart_data:/app/data</code> 将容器内的数据目录挂载到宿主机，用于持久化存储，例如 SQLite 数据库、上传的文件等。</li></ul><h4 id="_3-使用-docker-compose" tabindex="-1">3. 使用 Docker Compose <a class="header-anchor" href="#_3-使用-docker-compose" aria-label="Permalink to &quot;3. 使用 Docker Compose&quot;">​</a></h4><p>为了更方便地管理服务，您可以使用 <code>docker-compose.yml</code>。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3.8&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  web</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./WHartTest_Django</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    container_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">wharttest_backend</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8000:8000&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    env_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.env</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./whart_data:/app/data</span></span></code></pre></div><ul><li><strong>注意</strong>: 确保您的 <code>.env</code> 文件中包含了所有必要的环境变量。</li></ul><h3 id="🛠️-方案二-手动部署-以-ubuntu-为例" tabindex="-1">🛠️ 方案二：手动部署 (以 Ubuntu 为例) <a class="header-anchor" href="#🛠️-方案二-手动部署-以-ubuntu-为例" aria-label="Permalink to &quot;🛠️ 方案二：手动部署 (以 Ubuntu 为例)&quot;">​</a></h3><p>此方案适用于您希望对部署环境有完全控制权的场景。</p><h4 id="_1-系统准备" tabindex="-1">1. 系统准备 <a class="header-anchor" href="#_1-系统准备" aria-label="Permalink to &quot;1. 系统准备&quot;">​</a></h4><p>首先，安装 <code>uv</code>，一个先进的 Python 包管理器。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装 uv</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -LsSf</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://astral.sh/uv/install.sh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sh</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将 uv 添加到当前会话的 PATH</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/.cargo/env</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注意：为了永久生效，请将 \`source $HOME/.cargo/env\` 添加到您的 shell 配置文件中 (如 ~/.bashrc 或 ~/.zshrc)</span></span></code></pre></div><h4 id="_2-克隆项目" tabindex="-1">2. 克隆项目 <a class="header-anchor" href="#_2-克隆项目" aria-label="Permalink to &quot;2. 克隆项目&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your-repo-ur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> WHartTest_Django</span></span></code></pre></div><h4 id="_3-创建并激活虚拟环境" tabindex="-1">3. 创建并激活虚拟环境 <a class="header-anchor" href="#_3-创建并激活虚拟环境" aria-label="Permalink to &quot;3. 创建并激活虚拟环境&quot;">​</a></h4><p>使用 <code>uv</code> 创建并激活一个基于 Python 3.12 的虚拟环境。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 Python 3.12 创建虚拟环境</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> venv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python@3.12</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 激活虚拟环境</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .venv/bin/activate</span></span></code></pre></div><h4 id="_4-安装依赖" tabindex="-1">4. 安装依赖 <a class="header-anchor" href="#_4-安装依赖" aria-label="Permalink to &quot;4. 安装依赖&quot;">​</a></h4><p>使用 <code>uv</code> 高效地安装项目依赖。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sync</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span></span></code></pre></div><h4 id="_5-数据库迁移和超级用户创建" tabindex="-1">5. 数据库迁移和超级用户创建 <a class="header-anchor" href="#_5-数据库迁移和超级用户创建" aria-label="Permalink to &quot;5. 数据库迁移和超级用户创建&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行数据库迁移</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> manage.py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> migrate</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建超级管理员</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> manage.py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> createsuperuser</span></span></code></pre></div><h4 id="_6-启动服务" tabindex="-1">6. 启动服务 <a class="header-anchor" href="#_6-启动服务" aria-label="Permalink to &quot;6. 启动服务&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 Gunicorn 启动 Django 应用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gunicorn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wharttest_django.wsgi:application</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --bind</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.0.0.0:8000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --workers</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span></code></pre></div><h4 id="_6-收集静态文件" tabindex="-1">6. 收集静态文件 <a class="header-anchor" href="#_6-收集静态文件" aria-label="Permalink to &quot;6. 收集静态文件&quot;">​</a></h4><p>在生产环境中，静态文件（如 CSS, JavaScript, 图片）应由 Nginx 等 Web 服务器直接提供，以获得更好的性能。<code>collectstatic</code> 命令会将项目所有应用中的静态文件收集到 <code>STATIC_ROOT</code> 指定的单个目录中，以便于部署。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> manage.py</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> collectstatic</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --noinput</span></span></code></pre></div><h4 id="_7-使用-gunicorn-启动服务" tabindex="-1">7. 使用 Gunicorn 启动服务 <a class="header-anchor" href="#_7-使用-gunicorn-启动服务" aria-label="Permalink to &quot;7. 使用 Gunicorn 启动服务&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装 gunicorn</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gunicorn</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动服务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gunicorn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wharttest_django.wsgi:application</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --bind</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.0.0.0:8000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --workers</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --timeout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 120</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --preload</span></span></code></pre></div><ul><li><code>--preload</code> 会在启动时预加载模型，减少首次请求的延迟。</li></ul><h2 id="🔍-部署验证" tabindex="-1">🔍 部署验证 <a class="header-anchor" href="#🔍-部署验证" aria-label="Permalink to &quot;🔍 部署验证&quot;">​</a></h2><h3 id="_1-验证-api-连接" tabindex="-1">1. 验证 API 连接 <a class="header-anchor" href="#_1-验证-api-连接" aria-label="Permalink to &quot;1. 验证 API 连接&quot;">​</a></h3><p>启动服务后，检查日志输出，确认嵌入模型 API 连接正常。</p><div class="language-log vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">log</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">🚀 正在初始化嵌入模型API...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">✅ 嵌入模型API连接成功</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">🧪 API测试成功，服务正常</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">🤖 向量存储管理器初始化完成:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ✅ 实际使用的嵌入模型: API嵌入服务</span></span></code></pre></div><h3 id="_2-api-健康检查" tabindex="-1">2. API 健康检查 <a class="header-anchor" href="#_2-api-健康检查" aria-label="Permalink to &quot;2. API 健康检查&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 检查项目 API 是否正常 (需要有效的 JWT Token)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> GET</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://your-domain.com/api/projects/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Authorization: Bearer YOUR_JWT_TOKEN&quot;</span></span></code></pre></div><h3 id="_3-知识库功能测试" tabindex="-1">3. 知识库功能测试 <a class="header-anchor" href="#_3-知识库功能测试" aria-label="Permalink to &quot;3. 知识库功能测试&quot;">​</a></h3><p>通过 API 创建一个知识库，上传文档并进行搜索，验证整个流程是否正常。</p><h2 id="✅-生产环境检查清单" tabindex="-1">✅ 生产环境检查清单 <a class="header-anchor" href="#✅-生产环境检查清单" aria-label="Permalink to &quot;✅ 生产环境检查清单&quot;">​</a></h2><ul><li>[ ] <code>DEBUG</code> 设置为 <code>False</code></li><li>[ ] <code>SECRET_KEY</code> 已更换为强密钥</li><li>[ ] 使用 <code>Gunicorn</code> 或其他 WSGI 服务器</li><li>[ ] 配置 <code>Nginx</code> 作为反向代理</li><li>[ ] 数据库已从 SQLite 切换到 <code>PostgreSQL</code></li><li>[ ] 嵌入模型 API 已配置并连接正常</li><li>[ ] 静态文件已通过 <code>collectstatic</code> 收集并由 Nginx 服务</li><li>[ ] <code>SSL/TLS</code> 证书已配置，强制 HTTPS</li><li>[ ] 防火墙已启用，只开放必要端口</li><li>[ ] 备份策略已制定（数据库和用户上传文件）</li><li>[ ] 日志记录和监控已配置</li></ul>`,49)]))}const g=a(l,[["render",t]]);export{c as __pageData,g as default};
