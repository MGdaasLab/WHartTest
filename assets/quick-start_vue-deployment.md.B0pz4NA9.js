import{_ as a,c as i,o as n,ae as e}from"./chunks/framework.BBQ6_s69.js";const c=JSON.parse('{"title":"🖼️ 前端生产环境部署指南","description":"","frontmatter":{},"headers":[],"relativePath":"quick-start/vue-deployment.md","filePath":"quick-start/vue-deployment.md","lastUpdated":1757938511000}'),p={name:"quick-start/vue-deployment.md"};function l(t,s,h,d,r,o){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="🖼️-前端生产环境部署指南" tabindex="-1">🖼️ 前端生产环境部署指南 <a class="header-anchor" href="#🖼️-前端生产环境部署指南" aria-label="Permalink to &quot;🖼️ 前端生产环境部署指南&quot;">​</a></h1><p>本指南将引导您完成 WHartTest 前端应用的生产环境部署。我们将涵盖从构建应用到配置 Web 服务器的完整流程。</p><h2 id="📦-环境准备" tabindex="-1">📦 环境准备 <a class="header-anchor" href="#📦-环境准备" aria-label="Permalink to &quot;📦 环境准备&quot;">​</a></h2><p>在开始之前，请确保您的开发和部署环境满足以下要求：</p><ul><li><strong>Node.js</strong>: 版本 18 或更高。</li><li><strong>包管理器</strong>: <code>npm</code> 或 <code>yarn</code>。</li><li><strong>Web 服务器</strong>: <code>Nginx</code> (推荐), <code>Apache</code>, 或其他支持静态文件托管和反向代理的服务器。</li></ul><h2 id="🚀-部署步骤" tabindex="-1">🚀 部署步骤 <a class="header-anchor" href="#🚀-部署步骤" aria-label="Permalink to &quot;🚀 部署步骤&quot;">​</a></h2><h3 id="_1-获取项目代码" tabindex="-1">1. 获取项目代码 <a class="header-anchor" href="#_1-获取项目代码" aria-label="Permalink to &quot;1. 获取项目代码&quot;">​</a></h3><p>首先，从代码仓库克隆最新的前端项目代码。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 克隆仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/MGdaasLab/WHartTest.git</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入项目目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> WHartTest_Vue</span></span></code></pre></div><h3 id="_2-安装依赖" tabindex="-1">2. 安装依赖 <a class="header-anchor" href="#_2-安装依赖" aria-label="Permalink to &quot;2. 安装依赖&quot;">​</a></h3><p>进入项目目录后，使用 <code>npm</code> 或 <code>yarn</code> 安装项目所需的依赖项。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><h3 id="_3-配置开发环境" tabindex="-1">3. 配置开发环境 <a class="header-anchor" href="#_3-配置开发环境" aria-label="Permalink to &quot;3. 配置开发环境&quot;">​</a></h3><p>在开始本地开发之前，您需要在 <code>WHartTest_Vue</code> 根目录下创建一个 <code>.env</code> 文件来配置环境变量。这个文件用于指定开发服务器的 API 地址和代理设置。</p><p><strong>示例 <code>.env</code> 文件:</strong></p><div class="language-env vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">env</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 开发环境配置</span></span>
<span class="line"><span># API 基础路径</span></span>
<span class="line"><span>VITE_API_BASE_URL=/api</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 是否启用代理</span></span>
<span class="line"><span>VITE_USE_PROXY=true</span></span></code></pre></div><p><strong>配置说明:</strong></p><ul><li><code>VITE_API_BASE_URL=/api</code>: 定义了 API 请求的基础路径。在开发模式下，所有以 <code>/api</code> 开头的请求都将被代理到后端服务。</li><li><code>VITE_USE_PROXY=true</code>: 启用 Vite 开发服务器的反向代理功能。这需要配合 <code>vite.config.js</code> 中的代理设置，以解决本地开发时的跨域问题。</li></ul><p>创建并配置好此文件后，您可以运行 <code>npm run dev</code> 来启动本地开发服务器。</p><h3 id="_4-构建生产版本" tabindex="-1">4. 构建生产版本 <a class="header-anchor" href="#_4-构建生产版本" aria-label="Permalink to &quot;4. 构建生产版本&quot;">​</a></h3><p>安装完依赖后，运行构建命令来生成用于生产环境的优化版本。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div><p>此命令会在项目根目录下创建一个 <code>dist</code> 文件夹，其中包含了所有构建好的静态文件（HTML, CSS, JavaScript 等）。</p><h3 id="_5-配置-web-服务器" tabindex="-1">5. 配置 Web 服务器 <a class="header-anchor" href="#_5-配置-web-服务器" aria-label="Permalink to &quot;5. 配置 Web 服务器&quot;">​</a></h3><p>部署前端应用的核心是将构建产物（<code>dist</code> 目录下的文件）托管起来，并通过 Web 服务器对外提供访问。同时，需要配置反向代理将 API 请求转发到后端服务。</p><p>以下是一个推荐的 <code>Nginx</code> 配置示例：</p><div class="language-nginx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">your-frontend-domain.com; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 替换为您的前端域名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 前端静态文件根目录</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    root </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/path/to/your/WHartTest_Vue/dist; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 替换为 dist 目录的绝对路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    index </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index.html;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 处理前端路由（History 模式）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try_files </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$uri $uri/ /index.html;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # API 请求反向代理到后端服务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /api/ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http://your-backend-api-server.com; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 替换为您的后端 API 地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Host $host;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X-Real-IP $remote_addr;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">X-Forwarded-Proto $scheme;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        proxy_read_timeout </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        proxy_connect_timeout </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">75s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 可以选择性地为其他静态资源（如 media）配置缓存策略</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    location</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~*</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> \\.(?:jpg|jpeg|gif|png|ico|css|js)$ </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        expires </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        add_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Cache-Control </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;public&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_5-1-主要添加配置" tabindex="-1">5.1 主要添加配置 <a class="header-anchor" href="#_5-1-主要添加配置" aria-label="Permalink to &quot;5.1 主要添加配置&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>server</span></span>
<span class="line"><span>{    </span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    #CERT-APPLY-CHECK--END</span></span>
<span class="line"><span>    try_files $uri $uri/ /index.html;</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    # 添加后端 API 代理配置</span></span>
<span class="line"><span>    location /api {</span></span>
<span class="line"><span>        proxy_pass http://127.0.0.1:8000;  # Django 后端地址</span></span>
<span class="line"><span>        proxy_set_header Host $host;</span></span>
<span class="line"><span>        proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span>        proxy_set_header X-Forwarded-Proto $scheme;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        # WebSocket 支持</span></span>
<span class="line"><span>        proxy_http_version 1.1;</span></span>
<span class="line"><span>        proxy_set_header Upgrade $http_upgrade;</span></span>
<span class="line"><span>        proxy_set_header Connection &quot;upgrade&quot;;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><strong>配置说明:</strong></p><ul><li><code>listen 80;</code>: 监听 80 端口。</li><li><code>server_name</code>: 配置您的访问域名。</li><li><code>root</code>: 指向您项目中 <code>dist</code> 文件夹的绝对路径。</li><li><code>location /</code>: 这是处理单页应用（SPA）路由的关键。当用户访问一个前端路由时，Nginx 会返回 <code>index.html</code>，由 Vue Router接管后续的路由逻辑。</li><li><code>location /api/</code>: 将所有以 <code>/api/</code> 开头的请求代理到后端 API 服务器。<strong>请务必将 <code>proxy_pass</code> 的地址修改为您的实际后端服务地址</strong>。</li></ul><h3 id="_6-启动和验证" tabindex="-1">6. 启动和验证 <a class="header-anchor" href="#_6-启动和验证" aria-label="Permalink to &quot;6. 启动和验证&quot;">​</a></h3><p>保存 Nginx 配置后，重新加载或重启 Nginx 服务。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 测试 Nginx 配置是否正确</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重新加载 Nginx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reload</span></span></code></pre></div><p>现在，您应该可以通过浏览器访问您配置的域名 (<code>your-frontend-domain.com</code>) 来查看并使用 WHartTest 应用了。</p><h2 id="🔍-预览生产构建-可选" tabindex="-1">🔍 预览生产构建 (可选) <a class="header-anchor" href="#🔍-预览生产构建-可选" aria-label="Permalink to &quot;🔍 预览生产构建 (可选)&quot;">​</a></h2><p>如果您想在部署前本地预览生产构建的效果，可以运行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> preview</span></span></code></pre></div><p>该命令会启动一个本地静态文件服务器，让您可以在本地环境中检查 <code>dist</code> 文件夹的内容是否按预期工作。</p>`,39)]))}const g=a(p,[["render",l]]);export{c as __pageData,g as default};
