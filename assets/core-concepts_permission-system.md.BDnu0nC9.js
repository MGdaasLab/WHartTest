import{_ as e,c as o,o as l,ae as r}from"./chunks/framework.BBQ6_s69.js";const u=JSON.parse('{"title":"后端架构","description":"","frontmatter":{"title":"后端架构"},"headers":[],"relativePath":"core-concepts/permission-system.md","filePath":"core-concepts/permission-system.md","lastUpdated":1756197408000}'),s={name:"core-concepts/permission-system.md"};function n(a,t,d,i,g,c){return l(),o("div",null,t[0]||(t[0]=[r('<h1 id="后端架构-wharttest-django" tabindex="-1">后端架构 (WHartTest_Django) <a class="header-anchor" href="#后端架构-wharttest-django" aria-label="Permalink to &quot;后端架构 (WHartTest_Django)&quot;">​</a></h1><p>后端基于 Django 和 Django REST Framework (DRF) 构建，是一个强大的 API 服务器，负责处理业务逻辑、数据持久化，并集成了先进的 AI 能力。</p><h2 id="_2-1-技术选型" tabindex="-1">2.1. 技术选型 <a class="header-anchor" href="#_2-1-技术选型" aria-label="Permalink to &quot;2.1. 技术选型&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">类别</th><th style="text-align:left;">技术</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>核心框架</strong></td><td style="text-align:left;">Django &amp; DRF</td><td style="text-align:left;">提供了一个健壮、安全且可扩展的 Web API 开发框架。</td></tr><tr><td style="text-align:left;"><strong>数据库</strong></td><td style="text-align:left;">SQLite / PostgreSQL</td><td style="text-align:left;">开发时使用 SQLite，生产环境推荐使用 PostgreSQL。</td></tr><tr><td style="text-align:left;"><strong>认证授权</strong></td><td style="text-align:left;">Simple JWT &amp; API Key</td><td style="text-align:left;">提供 JWT (JSON Web Token) 用于前端用户认证，同时支持 API Key 用于外部工具或服务的认证。</td></tr><tr><td style="text-align:left;"><strong>AI 引擎</strong></td><td style="text-align:left;">LangChain &amp; LangGraph</td><td style="text-align:left;">作为 AI 核心，用于构建和运行复杂的大语言模型 (LLM) 应用，如对话系统和测试用例生成。</td></tr><tr><td style="text-align:left;"><strong>知识库</strong></td><td style="text-align:left;">ChromaDB &amp; HuggingFace</td><td style="text-align:left;">使用 ChromaDB 作为向量数据库，结合 HuggingFace 的 <code>BGE-M3</code> 等嵌入模型，实现高效的 RAG (检索增强生成)。</td></tr><tr><td style="text-align:left;"><strong>API 文档</strong></td><td style="text-align:left;">drf-spectacular</td><td style="text-align:left;">自动生成符合 OpenAPI 3.0 规范的 API 文档 (Swagger UI, ReDoc)。</td></tr><tr><td style="text-align:left;"><strong>异步任务</strong></td><td style="text-align:left;">(待定)</td><td style="text-align:left;">可通过 Celery 等工具实现异步任务处理，如文档向量化。</td></tr></tbody></table><h2 id="_2-2-应用模块-apps" tabindex="-1">2.2. 应用模块 (Apps) <a class="header-anchor" href="#_2-2-应用模块-apps" aria-label="Permalink to &quot;2.2. 应用模块 (Apps)&quot;">​</a></h2><p>项目采用模块化的设计，每个 Django App 负责一个明确的功能领域：</p><ul><li><strong><code>accounts</code></strong>: 负责用户注册、登录和认证，基于 Django 内置的 <code>User</code> 模型。</li><li><strong><code>projects</code></strong>: 管理项目和项目成员，实现了项目级别的数据隔离和基于角色的访问控制 (Owner, Admin, Member)。</li><li><strong><code>testcases</code></strong>: 负责测试用例的 CRUD，支持多级模块、测试步骤和截图管理。</li><li><strong><code>knowledge</code></strong>: <strong>知识库核心</strong>。管理知识库、文档上传（支持 PDF, DOCX 等），并调用服务进行文档解析、分块和向量化，最终存入 ChromaDB。</li><li><strong><code>langgraph_integration</code></strong>: <strong>AI 对话核心</strong>。管理 LLM 配置，并提供与 LangGraph 交互的接口，实现 AI 对话、上下文管理和流式响应。</li><li><strong><code>mcp_tools</code></strong>: 负责与外部工具通过模型上下文协议 (MCP) 进行集成，管理远程 MCP 服务器配置。</li><li><strong><code>api_keys</code></strong>: 提供 API Key 的生成和管理功能，用于保护需要程序化访问的端点。</li><li><strong><code>prompts</code></strong>: (规划中) 用于管理和版本化与 LLM 交互的提示词。</li><li><strong><code>requirements</code></strong>: (规划中) 负责需求文档的管理和智能评审。</li></ul><h2 id="_2-3-核心机制" tabindex="-1">2.3. 核心机制 <a class="header-anchor" href="#_2-3-核心机制" aria-label="Permalink to &quot;2.3. 核心机制&quot;">​</a></h2><ul><li><strong>API 架构</strong>: <ul><li><strong>视图集 (ViewSets)</strong>: 广泛使用 DRF 的 <code>ModelViewSet</code> 结合 <code>DefaultRouter</code> 快速构建遵循 RESTful 风格的 CRUD API。</li><li><strong>序列化器 (Serializers)</strong>: <code>ModelSerializer</code> 用于模型的验证、数据转换和 JSON 格式化。</li><li><strong>统一响应格式</strong>: 通过自定义的 <code>UnifiedResponseRenderer</code>，所有 API 响应都遵循 <code>{ &quot;status&quot;: &quot;success/error&quot;, &quot;code&quot;: 200, &quot;message&quot;: &quot;...&quot;, &quot;data&quot;: ... }</code> 的标准格式。</li></ul></li><li><strong>数据库模型</strong>: <ul><li>核心模型包括 <code>Project</code>, <code>User</code>, <code>TestCase</code>, <code>KnowledgeBase</code>, <code>Document</code> 等。</li><li>模型之间通过外键 (ForeignKey) 和多对多 (ManyToManyField) 关系构建了清晰的数据结构，例如：一个 <code>Project</code> 可以有多个 <code>TestCase</code> 和 <code>KnowledgeBase</code>。</li></ul></li><li><strong>认证与权限</strong>: <ul><li><strong>双重认证</strong>: API 请求可以通过 <code>Authorization: Bearer &lt;JWT&gt;</code> 或 <code>Authorization: Api-Key &lt;KEY&gt;</code> 进行认证。</li><li><strong>分层权限</strong>: 实现了基于 Django <code>ModelPermissions</code> 和项目角色的自定义权限系统。视图集会根据 <code>action</code> (如 <code>list</code>, <code>create</code>, <code>destroy</code>) 动态应用不同的权限检查，确保用户只能在授权范围内操作数据。</li></ul></li><li><strong>AI 与 RAG 集成</strong>: <ul><li>当用户在 AI 对话中提问时，<code>langgraph_integration</code> 应用会接收请求。</li><li>它会调用 <code>knowledge</code> 应用的服务，将问题向量化并在 ChromaDB 中检索相关的文档片段（Chunks）。</li><li>检索到的上下文会与用户的原始问题、系统提示词一起被整合，并发送给 LangGraph 中定义的大语言模型。</li><li>LLM 基于增强的上下文生成更精准的回答，最终通过流式响应返回给前端。</li></ul></li></ul>',9)]))}const h=e(s,[["render",n]]);export{u as __pageData,h as default};
