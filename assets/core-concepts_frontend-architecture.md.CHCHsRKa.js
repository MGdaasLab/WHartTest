import{_ as n,c as e,o as a,ae as t}from"./chunks/framework.BBQ6_s69.js";const u=JSON.parse('{"title":"前端架构","description":"","frontmatter":{"title":"前端架构"},"headers":[],"relativePath":"core-concepts/frontend-architecture.md","filePath":"core-concepts/frontend-architecture.md","lastUpdated":1756429855000}'),l={name:"core-concepts/frontend-architecture.md"};function p(o,s,i,c,r,d){return a(),e("div",null,s[0]||(s[0]=[t(`<h1 id="前端架构-wharttest-vue" tabindex="-1">前端架构 (WHartTest_Vue) <a class="header-anchor" href="#前端架构-wharttest-vue" aria-label="Permalink to &quot;前端架构 (WHartTest_Vue)&quot;">​</a></h1><p>前端项目基于 Vue 3 生态系统构建，采用 TypeScript 提供类型安全，Vite 作为构建工具以提升开发效率，旨在提供一个现代化、响应式且易于维护的用户界面。</p><h2 id="_1-1-技术选型" tabindex="-1">1.1. 技术选型 <a class="header-anchor" href="#_1-1-技术选型" aria-label="Permalink to &quot;1.1. 技术选型&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">类别</th><th style="text-align:left;">技术</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>核心框架</strong></td><td style="text-align:left;">Vue 3</td><td style="text-align:left;">采用组合式 API (Composition API) 进行开发，提升代码组织和复用性。</td></tr><tr><td style="text-align:left;"><strong>构建工具</strong></td><td style="text-align:left;">Vite</td><td style="text-align:left;">提供极速的开发服务器启动和热模块更新 (HMR)。</td></tr><tr><td style="text-align:left;"><strong>编程语言</strong></td><td style="text-align:left;">TypeScript</td><td style="text-align:left;">为项目提供静态类型检查，增强代码健壮性和可维护性。</td></tr><tr><td style="text-align:left;"><strong>UI 组件库</strong></td><td style="text-align:left;">Arco Design Vue</td><td style="text-align:left;">提供丰富、高质量的企业级组件，加速界面开发。</td></tr><tr><td style="text-align:left;"><strong>状态管理</strong></td><td style="text-align:left;">Pinia</td><td style="text-align:left;">Vue 官方推荐的状态管理库，提供类型安全、简洁易用的 API。</td></tr><tr><td style="text-align:left;"><strong>路由管理</strong></td><td style="text-align:left;">Vue Router</td><td style="text-align:left;">官方路由管理器，用于构建单页应用 (SPA)。</td></tr><tr><td style="text-align:left;"><strong>HTTP 客户端</strong></td><td style="text-align:left;">Axios</td><td style="text-align:left;">用于与后端 API 进行通信，并通过拦截器实现统一的请求/响应处理。</td></tr><tr><td style="text-align:left;"><strong>CSS 方案</strong></td><td style="text-align:left;">Tailwind CSS</td><td style="text-align:left;">原子化 CSS 框架，提供高度的灵活性和可定制性。</td></tr></tbody></table><h2 id="_1-2-目录结构" tabindex="-1">1.2. 目录结构 <a class="header-anchor" href="#_1-2-目录结构" aria-label="Permalink to &quot;1.2. 目录结构&quot;">​</a></h2><p>前端代码结构清晰，遵循功能模块化的组织方式，核心代码位于 <code>WHartTest_Vue/src</code> 目录下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>WHartTest_Vue/src/</span></span>
<span class="line"><span>├── api/                    # API 客户端配置</span></span>
<span class="line"><span>│   └── apiKeyService.ts</span></span>
<span class="line"><span>├── assets/                 # 静态资源</span></span>
<span class="line"><span>│   ├── beijing.png</span></span>
<span class="line"><span>│   ├── vue.svg</span></span>
<span class="line"><span>│   ├── wired-elements-custom.css</span></span>
<span class="line"><span>│   └── wired-style.css</span></span>
<span class="line"><span>├── components/             # 全局可复用组件</span></span>
<span class="line"><span>│   ├── organization/</span></span>
<span class="line"><span>│   ├── permission/</span></span>
<span class="line"><span>│   └── testcase/</span></span>
<span class="line"><span>├── features/              # 核心业务模块</span></span>
<span class="line"><span>│   ├── knowledge/         # 知识库管理</span></span>
<span class="line"><span>│   │   ├── components/</span></span>
<span class="line"><span>│   │   ├── services/</span></span>
<span class="line"><span>│   │   ├── types/</span></span>
<span class="line"><span>│   │   └── views/</span></span>
<span class="line"><span>│   ├── langgraph/         # LangGraph集成</span></span>
<span class="line"><span>│   │   ├── components/</span></span>
<span class="line"><span>│   │   ├── services/</span></span>
<span class="line"><span>│   │   ├── types/</span></span>
<span class="line"><span>│   │   └── views/</span></span>
<span class="line"><span>│   ├── prompts/           # 提示词管理</span></span>
<span class="line"><span>│   │   ├── components/</span></span>
<span class="line"><span>│   │   ├── services/</span></span>
<span class="line"><span>│   │   ├── types/</span></span>
<span class="line"><span>│   │   ├── utils/</span></span>
<span class="line"><span>│   │   └── views/</span></span>
<span class="line"><span>│   └── requirements/      # 需求管理</span></span>
<span class="line"><span>│       ├── components/</span></span>
<span class="line"><span>│       ├── services/</span></span>
<span class="line"><span>│       ├── types/</span></span>
<span class="line"><span>│       └── views/</span></span>
<span class="line"><span>├── layouts/               # 页面布局组件</span></span>
<span class="line"><span>│   └── MainLayout.vue</span></span>
<span class="line"><span>├── router/                # 路由配置</span></span>
<span class="line"><span>│   └── index.ts</span></span>
<span class="line"><span>├── services/              # 业务服务层</span></span>
<span class="line"><span>│   ├── authService.ts</span></span>
<span class="line"><span>│   ├── projectService.ts</span></span>
<span class="line"><span>│   ├── testcaseService.ts</span></span>
<span class="line"><span>│   └── ...</span></span>
<span class="line"><span>├── store/                 # 状态管理</span></span>
<span class="line"><span>│   ├── authStore.ts</span></span>
<span class="line"><span>│   └── projectStore.ts</span></span>
<span class="line"><span>├── utils/                 # 工具函数</span></span>
<span class="line"><span>│   ├── request.ts</span></span>
<span class="line"><span>│   ├── authErrorHandler.ts</span></span>
<span class="line"><span>│   └── formatters.ts</span></span>
<span class="line"><span>├── views/                 # 页面级组件</span></span>
<span class="line"><span>│   ├── DashboardView.vue</span></span>
<span class="line"><span>│   ├── LoginView.vue</span></span>
<span class="line"><span>│   └── ...</span></span>
<span class="line"><span>├── App.vue               # 应用主组件</span></span>
<span class="line"><span>└── main.ts               # 应用入口文件</span></span></code></pre></div><ul><li><strong><code>api/</code></strong>: 存放与具体业务无关的底层 API 客户端配置。</li><li><strong><code>assets/</code></strong>: 存放静态资源，如图片、字体和全局样式。</li><li><strong><code>components/</code></strong>: 存放全局可复用的 UI 组件，如权限选择器、成员表格等。</li><li><strong><code>features/</code></strong>: <strong>核心业务目录</strong>，按功能领域划分模块（如 <code>knowledge</code>, <code>langgraph</code>, <code>prompts</code>, <code>requirements</code>），每个模块内部包含自己的组件、服务、类型定义和视图。</li><li><strong><code>layouts/</code></strong>: 存放页面布局组件，如包含顶部导航和侧边栏的 <code>MainLayout.vue</code>。</li><li><strong><code>router/</code></strong>: 定义应用的路由规则和导航守卫，实现页面跳转和权限控制。</li><li><strong><code>services/</code></strong>: 存放与后端 API 交互的服务层，封装了具体的业务请求逻辑。</li><li><strong><code>store/</code></strong>: 使用 Pinia 进行状态管理，如 <code>authStore</code> 管理用户认证状态，<code>projectStore</code> 管理项目状态。</li><li><strong><code>utils/</code></strong>: 存放通用工具函数，如 <code>request.ts</code> 中封装的 Axios 实例和拦截器。</li><li><strong><code>views/</code></strong>: 存放顶层的页面级组件，通常由路由直接渲染。</li></ul><h3 id="_1-2-1-功能模块详解-features" tabindex="-1">1.2.1. 功能模块详解 (features/) <a class="header-anchor" href="#_1-2-1-功能模块详解-features" aria-label="Permalink to &quot;1.2.1. 功能模块详解 (features/)&quot;">​</a></h3><p>每个功能模块都采用统一的内部结构，包含以下子目录：</p><ul><li><p><strong><code>knowledge/</code></strong>: 知识库管理模块</p><ul><li><code>components/</code>: 知识库相关组件（文档上传、知识库详情等）</li><li><code>services/</code>: 知识库API服务</li><li><code>types/</code>: 知识库相关类型定义</li><li><code>views/</code>: 知识库管理页面</li></ul></li><li><p><strong><code>langgraph/</code></strong>: LangGraph集成模块</p><ul><li><code>components/</code>: 聊天界面、LLM配置等组件</li><li><code>services/</code>: 聊天和LLM配置API服务</li><li><code>types/</code>: 聊天和LLM配置类型定义</li><li><code>views/</code>: 聊天界面和LLM配置管理页面</li></ul></li><li><p><strong><code>prompts/</code></strong>: 提示词管理模块</p><ul><li><code>components/</code>: 提示词相关组件</li><li><code>services/</code>: 提示词API服务</li><li><code>types/</code>: 提示词类型定义</li><li><code>utils/</code>: 提示词验证工具</li><li><code>views/</code>: 提示词管理页面</li></ul></li><li><p><strong><code>requirements/</code></strong>: 需求管理模块</p><ul><li><code>components/</code>: 需求相关组件（上下文检查、版本选择等）</li><li><code>services/</code>: 需求和需求提示词API服务</li><li><code>types/</code>: 需求相关类型定义</li><li><code>views/</code>: 需求管理和报告查看页面</li></ul></li></ul><h2 id="_1-3-核心机制" tabindex="-1">1.3. 核心机制 <a class="header-anchor" href="#_1-3-核心机制" aria-label="Permalink to &quot;1.3. 核心机制&quot;">​</a></h2><ul><li><strong>API 请求与封装</strong>: 在 <code>utils/request.ts</code> 中，Axios 被封装用于所有后端请求。 <ul><li><strong>请求拦截器</strong>: 自动为每个请求附加 JWT <code>Authorization</code> 头。</li><li><strong>响应拦截器</strong>: 统一处理后端返回的数据结构，并实现了 <strong>Token 自动刷新机制</strong>。当检测到 401 未授权错误时，会尝试使用 <code>refreshToken</code> 获取新的 <code>accessToken</code> 并自动重试失败的请求，对用户透明。</li></ul></li><li><strong>状态管理</strong>: Pinia 负责全局状态管理。 <ul><li><code>authStore</code>: 管理用户的认证凭证（Token）、个人信息和登录状态，并与 <code>localStorage</code> 同步，实现持久化登录。</li><li><code>projectStore</code>: 管理当前选中的项目及其列表，确保在不同页面间共享统一的项目上下文。</li></ul></li><li><strong>路由与权限</strong>: <code>router/index.ts</code> 中定义的导航守卫 (<code>router.beforeEach</code>) 负责页面级的权限控制。它会检查用户的登录状态 (<code>isAuthenticated</code>) 和目标路由的 <code>meta.requiresAuth</code> 字段，未登录的用户访问受保护页面时将被重定向到登录页。</li></ul>`,13)]))}const h=n(l,[["render",p]]);export{u as __pageData,h as default};
